# This workflow checks out code, builds an image, performs a container image
# scan, evaluates the image, and promotes it if it passes.

name: DEPRECATED Anchore Enterprise

on: 
  #push:
  #  branches:
  #    - main
  #schedule:
  #  - cron: '38 19 * * 6'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Manual Build'  
        
env:
  ANCHORE_CLI_USER: ${{ secrets.ANCHORE_CLI_USER }}
  ANCHORE_CLI_PASS: ${{ secrets.ANCHORE_CLI_PASS }}
  ANCHORE_CLI_URL: ${{ secrets.ANCHORE_CLI_URL }}
  IMAGE_REGISTRY: ghcr.io
  IMAGE_TAG: production
        
jobs:

  Build-Push:
    runs-on: ubuntu-latest
    steps:
    - name: "Set environmental variables"
      run: |
        echo "IMAGE_DEV=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}" >> $GITHUB_ENV
        echo "IMAGE_PROD=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${IMAGE_TAG}" >> $GITHUB_ENV
    - name: Checkout Code
      uses: actions/checkout@v2
    - name: Login to ghcr.io
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${IMAGE_REGISTRY} -u ${GITHUB_ACTOR} --password-stdin
    - name: Build Docker Image
      run: |
        docker build . --file Dockerfile --tag ${IMAGE_DEV}
    - name: Push Docker Image
      run: |
        docker push ${IMAGE_DEV}
    - name: Archive Dockerfile
      uses: actions/upload-artifact@v4
      with:
        name: Dockerfile
        path: Dockerfile
        retention-days: 2

  Scan-Analyze:
    needs: Build-Push
    runs-on: ubuntu-latest
    steps:
    - name: "Set environmental variables"
      run: |
        echo "IMAGE_DEV=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}" >> $GITHUB_ENV
        echo "IMAGE_PROD=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${IMAGE_TAG}" >> $GITHUB_ENV    
    - name: Download Dockerfile Artifact 
      uses: actions/download-artifact@v2
      with:
        name: Dockerfile
    - name: Install anchore-cli
      run: |
        sudo apt-get install python3-pip
        pip install anchorecli
        export PATH="$HOME/.local/bin/:$PATH"
    - name: Add to Enterprise Queue
      run: | 
        anchore-cli image add --noautosubscribe --dockerfile ./Dockerfile ${IMAGE_DEV} --annotation actor=${GITHUB_ACTOR} --annotation build_tool=github
        # if you can't install anchore-cli in your runner you can use the docker image like this:
        # docker run -e ANCHORE_CLI_USER -e ANCHORE_CLI_PASS -e ANCHORE_CLI_URL --mount type=bind,src=${PWD}/Dockerfile,dst=/Dockerfile anchore/engine-cli anchore-cli image add --noautosubscribe --dockerfile /Dockerfile ${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${GITHUB_SHA} --annotation actor=${GITHUB_ACTOR}
    - name: Wait for Enterprise Analysis
      run: |
        anchore-cli image wait ${IMAGE_DEV}
        

  Evaluate:
    needs: Scan-Analyze
    runs-on: ubuntu-latest
    steps:
    - name: "Set environmental variables"
      run: |
        echo "IMAGE_DEV=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}" >> $GITHUB_ENV
        echo "IMAGE_PROD=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${IMAGE_TAG}" >> $GITHUB_ENV
    - name: Install anchore-cli
      run: |
        sudo apt-get install python3-pip
        pip install anchorecli
        export PATH="$HOME/.local/bin/:$PATH"
    - name: Verify Anchore Ready and Reachable
      run: |
        anchore-cli system status 
    - name: Pull Vulnerability List
      run: |
        anchore-cli image vuln ${IMAGE_DEV} all | tee anchore-vuln.txt
    - name: Pull Policy Evaluation
      run: |
        set -o pipefail
        # we have to set pipefail so that we can still gate on the evaluation, otherwise piping into tee will mask the failure
        anchore-cli evaluate check --detail ${IMAGE_DEV} | tee anchore-policy.txt
    - name: Archive Vulnerabilities and Evaluation
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: evaluation-report
        path: anchore-*.txt
        retention-days: 14
        
  Promote-Deploy:
    needs: Evaluate
    runs-on: ubuntu-latest
    steps:
    - name: "Set environmental variables"
      run: |
        echo "IMAGE_DEV=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}" >> $GITHUB_ENV
        echo "IMAGE_PROD=${IMAGE_REGISTRY}/${GITHUB_REPOSITORY,,}:${IMAGE_TAG}" >> $GITHUB_ENV    
    - name: Login to ghcr.io
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
    - name: Re-Tag Image
      run: |
        docker pull ${IMAGE_DEV}
        docker tag ${IMAGE_DEV} ${IMAGE_PROD}
    - name: Push Docker Image
      run: |
        docker push ${IIMAGE_PROD}
    - name: Install anchore-cli
      run: |
        sudo apt-get install python3-pip
        pip install anchorecli
        export PATH="$HOME/.local/bin/:$PATH"
    - name: Add Promoted Image to Anchore Queue
      run: |
        anchore-cli image add --noautosubscribe ${IMAGE_PROD} --annotation actor=${GITHUB_ACTOR} --annotation build_tool=github
        anchore-cli image wait ${IMAGE_PROD}
    - name: Activate Policy and Vulnerability Subscriptions
      run: |
        anchore-cli subscription activate policy_eval ${IMAGE_PROD}
        anchore-cli subscription activate vuln_update ${IMAGE_PROD}


